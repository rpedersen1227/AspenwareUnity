get:
  tags:
    - Payments
  summary: Retrieve a payment list
  operationId: GetPaymentCollection
  deprecated: true
  description: |
    Retrieve a payment list
  parameters:
    - $ref: '#/components/parameters/collectionLimit'
    - $ref: '#/components/parameters/collectionOffset'
    - name: Accept
      in: header
      description: The response media type
      schema:
        type: string
        enum:
          - application/json
          - text/csv
        default: application/json
  responses:
    '200':
      description: Payment list was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
        Pagination-Total:
          $ref: '#/components/headers/Pagination-Total'
        Pagination-Limit:
          $ref: '#/components/headers/Pagination-Limit'
        Pagination-Offset:
          $ref: '#/components/headers/Pagination-Offset'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Payment'
        text/csv:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Payment'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
  x-code-samples:
    - lang: PHP
      source: |
        $payments = $client->payments()->search([
            'filter' => 'currency:USD',
        ]);
post:
  deprecated: true
  tags:
    - Payments
  summary: Create a payment
  operationId: PostPayment
  description: |
    Create a payment (deprecated).  Use create a transaction instead.
  requestBody:
    $ref: '#/components/requestBodies/Payment'
  responses:
    '201':
      description: Payment was processed
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Payment'
    '202':
      description: Payment was accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '409':
      $ref: '#/components/responses/Conflict'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: >
        $paymentForm = new Rebilly\Entities\Payment();


        $paymentForm->setWebsiteId('websiteId');

        $paymentForm->setCustomerId('customerId');

        $paymentForm->setCurrency('USD');

        $paymentForm->setAmount(1.99);


        $data = [
            'method' => Rebilly\Entities\PaymentMethod::METHOD_CASH,
        ];


        $paymentInstrumentForm = new
        Rebilly\Entities\PaymentMethodInstrument($data);


        $paymentForm->setPaymentInstrument($paymentInstrumentForm);


        try {
            $payment = $client->payments()->create($paymentForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
