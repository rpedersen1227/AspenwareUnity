parameters:
  - $ref: '#/components/parameters/resourceId'
get:
  deprecated: true
  tags:
    - Payments
  summary: Retrieve a payment
  operationId: GetPayment
  description: |
    Retrieve a payment with specified identifier string
  responses:
    '200':
      description: Payment was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Payment'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
  x-code-samples:
    - lang: PHP
      source: |
        $payment = $client->payments()->load('paymentId');
put:
  deprecated: true
  tags:
    - Payments
  summary: Create a payment with predefined ID
  operationId: PutPayment
  description: |
    Make a payment with predefined identifier string
  requestBody:
    $ref: '#/components/requestBodies/Payment'
  responses:
    '201':
      description: Payment was processed
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json; charset=utf-8:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Payment'
    '202':
      description: Payment was accepted
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Payment'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: >
        $paymentForm = new Rebilly\Entities\Payment();


        $paymentForm->setWebsiteId('websiteId');

        $paymentForm->setCustomerId('customerId');

        $paymentForm->setCurrency('USD');

        $paymentForm->setAmount(1.99);


        $data = [
            'method' => Rebilly\Entities\PaymentMethod::METHOD_CASH,
        ];


        $paymentInstrumentForm = new
        Rebilly\Entities\PaymentMethodInstrument($data);


        $paymentForm->setPaymentInstrument($paymentInstrumentForm);


        try {
            $payment = $client->payments()->update('paymentId', $paymentForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
