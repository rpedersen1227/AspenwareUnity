get:
  tags:
    - Payment Cards
  summary: Retrieve a list of Payment Cards
  operationId: GetPaymentCardCollection
  description: |
    Retrieve a list of Payments Cards
  parameters:
    - $ref: '#/components/parameters/collectionLimit'
    - $ref: '#/components/parameters/collectionOffset'
  responses:
    '200':
      description: A list of Payment Card was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
        Pagination-Total:
          $ref: '#/components/headers/Pagination-Total'
        Pagination-Limit:
          $ref: '#/components/headers/Pagination-Limit'
        Pagination-Offset:
          $ref: '#/components/headers/Pagination-Offset'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentCard'
    '401':
      $ref: '#/components/responses/AccessForbidden'
  x-code-samples:
    - lang: PHP
      source: |
        $paymentCards = $client->paymentCards()->search([
            'filter' => 'status:active',
        ]);
post:
  tags:
    - Payment Cards
  summary: Create a Payment Card
  operationId: PostPaymentCard
  description: |
    Create a Payment Card
  requestBody:
    content:
      application/json:
        schema:
          oneOf:
            - $ref: '#/components/schemas/PaymentCardCreateToken'
            - $ref: '#/components/schemas/PaymentCardCreatePlain'
    description: PaymentCard resource
    required: true
  responses:
    '200':
      description: Payment Card was updated
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCard'
    '201':
      description: Payment Card was created
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCard'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $paymentCardForm = new Rebilly\Entities\PaymentCard();
        $paymentCardForm->setCustomerId('customerId');
        $paymentCardForm->setPan('4111111111111111');
        $paymentCardForm->setExpYear(2025);
        $paymentCardForm->setExpMonth(8);
        $paymentCardForm->setBillingAddress([
            'firstName' => 'John',
            'lastName' => 'Doe',
            'organization' => 'Test LTD',
            'address' => 'Test street 5',
            'address2' => 'Test house 5',
            'city' => 'New York',
            'region' => 'Long Island',
            'country' => 'US',
            'postalCode' => '123456',
            'emails' => [
                [
                    'label' => 'main',
                    'value' => 'johndoe@testemail.com',
                    'primary' => true,
                ],
                [
                    'label' => 'secondary',
                    'value' => 'otheremail@testemail.com',
                ],
            ],
            'phoneNumbers' => [
                [
                    'label' => 'work',
                    'value' => '+123456789',
                    'primary' => true,
                ],
                [
                    'label' => 'home',
                    'value' => '+9874654321',
                ],
            ],
        ]);

        try {
            $paymentCard = $client->paymentCards()->create($paymentCardForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
