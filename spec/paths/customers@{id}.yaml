parameters:
  - $ref: '#/components/parameters/resourceId'
get:
  tags:
    - Customers
  summary: Retrieve a customer
  operationId: GetCustomer
  description: |
    Retrieve a customer with specified identifier string
  responses:
    '200':
      description: Customer was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
  x-code-samples:
    - lang: PHP
      source: |
        $customers = $client->customers()->load('myCustomerId');
put:
  tags:
    - Customers
  summary: Upsert a customer with predefined ID
  operationId: PutCustomer
  description: >
    Create or update (upsert) a customer with predefined identifier string.

    Read our guide to [preventing
    duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)

    to understand more.
  requestBody:
    $ref: '#/components/requestBodies/Customer'
  responses:
    '200':
      $ref: '#/components/responses/Customer'
    '201':
      $ref: '#/components/responses/Customer'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '409':
      $ref: '#/components/responses/Conflict'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $customerForm = new Rebilly\Entities\Customer();
        $customerForm->setPrimaryAddress([
            'firstName' => 'John',
            'lastName' => 'Doe',
            'organization' => 'Test LTD',
            'address' => 'Test street 5',
            'address2' => 'Test house 5',
            'city' => 'New York',
            'region' => 'Long Island',
            'country' => 'US',
            'postalCode' => '123456',
            'emails' => [
                [
                    'label' => 'main',
                    'value' => 'johndoe@testemail.com',
                    'primary' => true,
                ],
                [
                    'label' => 'secondary',
                    'value' => 'otheremail@testemail.com',
                ],
            ],
            'phoneNumbers' => [
                [
                    'label' => 'work',
                    'value' => '+123456789',
                    'primary' => true,
                ],
                [
                    'label' => 'home',
                    'value' => '+9874654321',
                ],
            ],
        ]);

        try {
            $customer = $client->customers()->update('myCustomerId', $customerForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
delete:
  parameters:
    - in: query
      name: targetCustomerId
      required: true
      schema:
        type: string
      description: >-
        The customer idendifier to get the data of the deleted duplicate
        customer
  tags:
    - Customers
  summary: Merge and delete a customer
  operationId: DeleteCustomer
  description: >-
    Merge one duplicate customer to another target customer and delete the
    former.
  responses:
    '204':
      description: Customer has been merged and removed
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
