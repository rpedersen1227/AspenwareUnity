get:
  tags:
    - Files
  summary: Retrieve a list of files
  operationId: GetFileCollection
  description: |
    Retrieve a list of files
  parameters:
    - $ref: '#/components/parameters/collectionLimit'
    - $ref: '#/components/parameters/collectionOffset'
    - $ref: '#/components/parameters/collectionFilter'
    - $ref: '#/components/parameters/collectionQuery'
    - $ref: '#/components/parameters/collectionExpand'
    - $ref: '#/components/parameters/collectionFields'
    - name: sort
      in: query
      description: >-
        The collection items sort field and order (prefix with "-" for
        descending sort).
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - id
            - '-id'
            - name
            - '-name'
            - extension
            - '-extension'
            - size
            - '-size'
            - width
            - '-width'
            - height
            - '-height'
            - createdTime
            - '-createdTime'
            - updatedTime
            - '-updatedTime'
  responses:
    '200':
      description: A list of Files was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
        Pagination-Total:
          $ref: '#/components/headers/Pagination-Total'
        Pagination-Limit:
          $ref: '#/components/headers/Pagination-Limit'
        Pagination-Offset:
          $ref: '#/components/headers/Pagination-Offset'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/File'
    '401':
      $ref: '#/components/responses/AccessForbidden'
  x-code-samples:
    - lang: PHP
      source: |
        $files = $client->files()->search([
            'filter' => 'name:TestFile',
        ]);
post:
  tags:
    - Files
  summary: Create a file
  operationId: PostFile
  security:
    - SecretApiKey: []
    - JWT: []
    - PublishableApiKey: []
  description: >
    Additionally, a file can be sent with:
     - multipart/form-data POST request: in this case all property names are the same as the JSON ones (`file` is an uploaded file)
     - file body request: the file body is sent as the request body, with the appropriate `Content-Type`. No additional
     properties can be set along the request data

    The following file types only are allowed:
     - jpg
     - png
     - gif
     - pdf
     - mp3


    If using a Publishable Api Key, only private files can be created. The files
    can later on be modified or used using
     a secret API key.
  requestBody:
    content:
      application/json:
        schema:
          oneOf:
            - $ref: '#/components/schemas/FileCreateFromInline'
            - $ref: '#/components/schemas/FileCreateFromUrl'
    required: true
  responses:
    '201':
      description: File was created
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/File'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $fileForm = new Rebilly\Entities\File();
        $fileForm->setUrl('http://test.com/somefile.jpg');

        try {
            $file = $client->files()->create($fileForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
