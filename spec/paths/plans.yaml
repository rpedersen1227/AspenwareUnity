get:
  tags:
    - Plans
  summary: Retrieve a list of plans
  operationId: GetPlanCollection
  description: |
    Retrieve a list of plans
  parameters:
    - $ref: '#/components/parameters/collectionLimit'
    - $ref: '#/components/parameters/collectionOffset'
  responses:
    '200':
      description: A list of Plans was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
        Pagination-Total:
          $ref: '#/components/headers/Pagination-Total'
        Pagination-Limit:
          $ref: '#/components/headers/Pagination-Limit'
        Pagination-Offset:
          $ref: '#/components/headers/Pagination-Offset'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Plan'
    '401':
      $ref: '#/components/responses/AccessForbidden'
  x-code-samples:
    - lang: PHP
      source: |
        $plans = $client->plans()->search([
            'filter' => 'name:TestPlan',
        ]);
post:
  tags:
    - Plans
  summary: Create a plan
  operationId: PostPlan
  description: |
    Create a plan
  requestBody:
    $ref: '#/components/requestBodies/Plan'
  responses:
    '201':
      description: Plan was created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Plan'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $planForm = new Rebilly\Entities\Plan();
        $planForm->setName('TestPlan');
        $planForm->setCurrency('USD');
        $planForm->setTrialAmount(1);
        $planForm->setTrialPeriodUnit('day');
        $planForm->setTrialPeriodLength(1);
        $planForm->setProductId('test-product');

        try {
            $plan = $client->plans()->create($planForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
