parameters:
  - $ref: '#/components/parameters/resourceId'
get:
  tags:
    - Files
  summary: Retrieve a File Record
  operationId: GetFile
  description: |
    Retrieve a File with specified identifier string
  responses:
    '200':
      description: File was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/File'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
  x-code-samples:
    - lang: PHP
      source: |
        $file = $client->files()->load('fileId');
put:
  tags:
    - Files
  summary: Update the File with predefined ID
  operationId: PutFile
  description: >
    Update the File with predefined ID. Note that file can be uploaded with POST
    only.
  requestBody:
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/File'
    description: File resource
    required: true
  responses:
    '200':
      description: File was updated
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/File'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $fileForm = new Rebilly\Entities\File();
        $fileForm->setDescription('This is a test file');

        try {
            $file = $client->files()->update('fileId', $fileForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
delete:
  tags:
    - Files
  summary: Delete a File
  operationId: DeleteFile
  description: |
    Delete the File with predefined identifier string
  responses:
    '204':
      description: File was deleted
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
  x-code-samples:
    - lang: PHP
      source: |
        $client->files()->delete('fileId');
