parameters:
  - $ref: '#/components/parameters/resourceId'
get:
  tags:
    - Payment Cards
  summary: Retrieve a Payment Card
  operationId: GetPaymentCard
  description: |
    Retrieve a Payment Card with specified identifier string
  responses:
    '200':
      description: Payment card was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCard'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
  x-code-samples:
    - lang: PHP
      source: |
        $paymentCard = $client->paymentCards()->load('paymentCardId');
patch:
  tags:
    - Payment Cards
  summary: Update a payment card's values
  operationId: PatchPaymentCard
  description: |
    Update any of the payment card's values except for the pan
  requestBody:
    content:
      application/json:
        schema:
          type: object
          properties:
            cvv:
              description: Card's cvv (card verification value).
              type: string
            expMonth:
              description: Card's expiry month
              type: integer
            expYear:
              description: Card's expiry year
              type: integer
            billingAddress:
              description: Card's billing address
              allOf:
                - $ref: '#/components/schemas/ContactObject'
            stickyGatewayAccountId:
              description: Sticky Gateway Account ID
              allOf:
                - $ref: '#/components/schemas/ResourceId'
            customFields:
              $ref: '#/components/schemas/ResourceCustomFields'
    description: Payment card
  responses:
    '200':
      description: Payment card was updated
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCard'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '404':
      $ref: '#/components/responses/NotFound'
    '422':
      $ref: '#/components/responses/InvalidDataError'
put:
  tags:
    - Payment Cards
  summary: Create a payment card with predefined ID
  operationId: PutPaymentCard
  requestBody:
    content:
      application/json:
        schema:
          oneOf:
            - $ref: '#/components/schemas/PaymentCardCreateToken'
            - $ref: '#/components/schemas/PaymentCardCreatePlain'
    description: Payment card
  responses:
    '200':
      description: Payment card was updated
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCard'
    '201':
      description: Payment card was created
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCard'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '409':
      description: Payment card already exists and cannot be updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $paymentCardForm = new Rebilly\Entities\PaymentCard();
        $paymentCardForm->setCustomerId('customerId');
        $paymentCardForm->setPan('4111111111111111');
        $paymentCardForm->setExpYear(2025);
        $paymentCardForm->setExpMonth(8);
        $paymentCardForm->setBillingAddress([
            'firstName' => 'John',
            'lastName' => 'Doe',
            'organization' => 'Test LTD',
            'address' => 'Test street 5',
            'address2' => 'Test house 5',
            'city' => 'New York',
            'region' => 'Long Island',
            'country' => 'US',
            'postalCode' => '123456',
            'emails' => [
                [
                    'label' => 'main',
                    'value' => 'johndoe@testemail.com',
                    'primary' => true,
                ],
                [
                    'label' => 'secondary',
                    'value' => 'otheremail@testemail.com',
                ],
            ],
            'phoneNumbers' => [
                [
                    'label' => 'work',
                    'value' => '+123456789',
                    'primary' => true,
                ],
                [
                    'label' => 'home',
                    'value' => '+9874654321',
                ],
            ],
        ]);

        try {
            $paymentCard = $client->paymentCards()->create($paymentCardForm, 'paymentCardId');
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
