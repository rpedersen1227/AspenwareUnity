post:
  tags:
    - Payment Tokens
  summary: Create a payment token
  operationId: PostToken
  description: |
    [FramePay](https://rebilly.github.io/framepay-docs/)
    is the recommended way to 
    create a payment token because it minimizes
    PCI DSS compliance.  Once a payment token 
    is created, it can only be used once.

    A payment token expires upon first use
    or within 30 minutes of the token creation
    (whichever comes first).
  requestBody:
    content:
      application/json:
        schema:
          oneOf:
            - $ref: '#/components/schemas/PaymentCardToken'
            - $ref: '#/components/schemas/BankAccountToken'
            - $ref: '#/components/schemas/PaymentToken'
    description: PaymentToken resource
    required: true
  security:
    - PublishableApiKey: []
    - SecretApiKey: []
    - JWT: []
  responses:
    '201':
      description: Token was created
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/PaymentCardToken'
              - $ref: '#/components/schemas/BankAccountToken'
              - $ref: '#/components/schemas/PaymentToken'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: >
        $paymentCardTokenForm = new Rebilly\Entities\PaymentCardToken();

        $paymentCardTokenForm->setBillingAddress([
            'firstName' => 'John',
            'lastName' => 'Doe',
            'organization' => 'Test LTD',
            'address' => 'Test street 5',
            'address2' => 'Test house 5',
            'city' => 'New York',
            'region' => 'Long Island',
            'country' => 'US',
            'postalCode' => '123456',
            'emails' => [
                [
                    'label' => 'main',
                    'value' => 'johndoe@testemail.com',
                    'primary' => true,
                ],
                [
                    'label' => 'secondary',
                    'value' => 'otheremail@testemail.com',
                ],
            ],
            'phoneNumbers' => [
                [
                    'label' => 'work',
                    'value' => '+123456789',
                    'primary' => true,
                ],
                [
                    'label' => 'home',
                    'value' => '+9874654321',
                ],
            ],
        ]);


        $paymentInstrumentForm = new
        Entities\PaymentInstruments\PaymentCardPaymentInstrument();

        $paymentInstrumentForm->setPan('4111111111111111');

        $paymentInstrumentForm->setExpYear(2025);

        $paymentInstrumentForm->setExpMonth(8);

        $paymentInstrumentForm->setCvv(123);


        $paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);


        try {
            $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
get:
  tags:
    - Payment Tokens
  summary: Retrieve a list of tokens
  operationId: GetTokenCollection
  description: |
    Retrieve a list of tokens
  parameters:
    - $ref: '#/components/parameters/collectionLimit'
    - $ref: '#/components/parameters/collectionOffset'
  responses:
    '200':
      description: A list of tokens was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
        Pagination-Total:
          $ref: '#/components/headers/Pagination-Total'
        Pagination-Limit:
          $ref: '#/components/headers/Pagination-Limit'
        Pagination-Offset:
          $ref: '#/components/headers/Pagination-Offset'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentToken'
    '401':
      $ref: '#/components/responses/AccessForbidden'
  x-code-samples:
    - lang: PHP
      source: |
        $paymentCardTokens = $client->paymentCardTokens()->search([
            'filter' => 'token:string',
        ]);
