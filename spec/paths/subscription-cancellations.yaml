get:
  tags:
    - Subscriptions
  summary: Retrieve a list of cancellations
  operationId: GetSubscriptionCancellationCollection
  description: Retrieve a list of cancellations for all subscriptions
  parameters:
    - $ref: '#/components/parameters/collectionLimit'
    - $ref: '#/components/parameters/collectionOffset'
  responses:
    '200':
      description: A list of cancellations was retrieved successfully
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
        Pagination-Total:
          $ref: '#/components/headers/Pagination-Total'
        Pagination-Limit:
          $ref: '#/components/headers/Pagination-Limit'
        Pagination-Offset:
          $ref: '#/components/headers/Pagination-Offset'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SubscriptionCancellation'
    '401':
      $ref: '#/components/responses/AccessForbidden'
post:
  tags:
    - Subscriptions
  summary: Cancel a subscription
  operationId: PostSubscriptionCancellation
  description: Cancel a subscription or preview the cancellation parameters before that
  requestBody:
    $ref: '#/components/requestBodies/SubscriptionCancellation'
  responses:
    '201':
      description: 'Cancellation was created, subscription is or will be deactivated'
      headers:
        Rate-Limit-Limit:
          $ref: '#/components/headers/Rate-Limit-Limit'
        Rate-Limit-Remaining:
          $ref: '#/components/headers/Rate-Limit-Remaining'
        Rate-Limit-Reset:
          $ref: '#/components/headers/Rate-Limit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionCancellation'
    '401':
      $ref: '#/components/responses/AccessForbidden'
    '422':
      $ref: '#/components/responses/InvalidDataError'
  x-code-samples:
    - lang: PHP
      source: |
        $subscriptionCancelForm = new Rebilly\Entities\SubscriptionCancel();
        $subscriptionCancelForm->setEffectiveTime(new DateTime());

        try {
            $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);
        } catch (UnprocessableEntityException $e) {
            echo $e->getMessage();
        }
